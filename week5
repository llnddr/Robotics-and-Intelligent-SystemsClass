##Dijkstra's Algorithm
import heapq

def dijkstra(graph, start, goal):
    queue = [(0, start, [])]
    visited = set()
    while queue:
        (cost, node, path) = heapq.heappop(queue)
        if node in visited:
            continue
        path = path + [node]
        visited.add(node)
        if node == goal:
            return (cost, path)
        for (next_node, distance) in graph[node].items():
            if next_node not in visited:
                heapq.heappush(queue, (cost + distance, next_node, path))
    return float("inf"), []

# Contoh penggunaan
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1}
}
start = 'A'
goal = 'D'
cost, path = dijkstra(graph, start, goal)
print("Shortest path:", path)
print("Total cost:", cost)

##A* Algorithm
import heapq

def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def a_star(grid, start, goal):
    rows, cols = len(grid), len(grid[0])
    queue = [(0, start)]
    costs = {start: 0}
    paths = {start: None}
    while queue:
        (current_cost, current) = heapq.heappop(queue)
        if current == goal:
            path = []
            while current:
                path.append(current)
                current = paths[current]
            return path[::-1]
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            neighbor = (current[0] + dx, current[1] + dy)
            if 0 <= neighbor[0] < rows and 0 <= neighbor[1] < cols and grid[neighbor[0]][neighbor[1]] == 0:
                new_cost = costs[current] + 1
                if neighbor not in costs or new_cost < costs[neighbor]:
                    costs[neighbor] = new_cost
                    priority = new_cost + heuristic(neighbor, goal)
                    heapq.heappush(queue, (priority, neighbor))
                    paths[neighbor] = current
    return None

# Contoh penggunaan
grid = [
    [0, 1, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [1, 1, 0, 0, 0],
    [0, 0, 0, 1, 0]
]
start = (0, 0)
goal = (4, 4)
path = a_star(grid, start, goal)
print("Path found:", path)

##Cell Decomposition
import numpy as np

def cell_decomposition(grid, start, goal):
    rows, cols = grid.shape
    visited = np.zeros_like(grid)
    stack = [start]
    paths = {start: None}

    def get_neighbors(cell):
        neighbors = []
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            neighbor = (cell[0] + dx, cell[1] + dy)
            if 0 <= neighbor[0] < rows and 0 <= neighbor[1] < cols and grid[neighbor[0], neighbor[1]] == 0:
                neighbors.append(neighbor)
        return neighbors

    while stack:
        current = stack.pop()
        if current == goal:
            path = []
            while current:
                path.append(current)
                current = paths[current]
            return path[::-1]
        visited[current] = 1
        for neighbor in get_neighbors(current):
            if not visited[neighbor]:
                stack.append(neighbor)
                paths[neighbor] = current
    return None

# Contoh penggunaan
grid = np.array([
    [0, 1, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [1, 1, 0, 0, 0],
    [0, 0, 0, 1, 0]
])
start = (0, 0)
goal = (4, 4)
path = cell_decomposition(grid, start, goal)
print("Path found using cell decomposition:", path)
