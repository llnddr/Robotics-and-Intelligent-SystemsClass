Ekstraksi Garis dengan Hough Transform:

Gunakan cv2.HoughLines() atau cv2.HoughLinesP() untuk mendeteksi garis.
Input gambar biasanya diubah menjadi grayscale dan diterapkan edge detection seperti Canny.
Template Matching untuk Deteksi Objek:

Gunakan cv2.matchTemplate() untuk mencocokkan template dalam gambar utama.
Gunakan metode seperti cv2.TM_CCOEFF atau lainnya untuk mencari lokasi dengan nilai kecocokan terbaik.
Pembuatan Pyramid Gambar:

Gunakan fungsi cv2.pyrDown() untuk membuat pyramid Gaussian ke bawah.
Gunakan cv2.pyrUp() untuk membuat pyramid Gaussian ke atas.
Deteksi Lingkaran Menggunakan Hough Transform:

Gunakan cv2.HoughCircles() untuk mendeteksi lingkaran.
Pastikan parameter seperti radius dan threshold disesuaikan dengan gambar.
Ekstraksi Warna Dominan pada Gambar:

Gunakan K-Means clustering (cv2.kmeans) pada ruang warna seperti RGB atau HSV untuk menemukan warna dominan.
Deteksi Kontur pada Gambar:

Gunakan cv2.findContours() untuk mendeteksi kontur.
Gambarkan kontur menggunakan cv2.drawContours().

1. Ekstraksi Garis dengan Hough Transform
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the image
image = cv2.imread('example_image.jpg')
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Edge detection
edges = cv2.Canny(gray, 50, 150, apertureSize=3)

# Hough Line Transform
lines = cv2.HoughLines(edges, 1, np.pi/180, 200)

# Draw the lines on the image
for line in lines:
    rho, theta = line[0]
    a = np.cos(theta)
    b = np.sin(theta)
    x0 = a * rho
    y0 = b * rho
    x1 = int(x0 + 1000 * (-b))
    y1 = int(y0 + 1000 * a)
    x2 = int(x0 - 1000 * (-b))
    y2 = int(y0 - 1000 * a)
    cv2.line(image, (x1, y1), (x2, y2), (0, 255, 0), 2)

# Display the result
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('Hough Line Transform')
plt.show()


Berikut adalah kode dan contoh implementasi untuk masing-masing tugas yang disebutkan:

1. Ekstraksi Garis dengan Hough Transform
python
Copy code
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the image
image = cv2.imread('example_image.jpg')
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Edge detection
edges = cv2.Canny(gray, 50, 150, apertureSize=3)

# Hough Line Transform
lines = cv2.HoughLines(edges, 1, np.pi/180, 200)

# Draw the lines on the image
for line in lines:
    rho, theta = line[0]
    a = np.cos(theta)
    b = np.sin(theta)
    x0 = a * rho
    y0 = b * rho
    x1 = int(x0 + 1000 * (-b))
    y1 = int(y0 + 1000 * a)
    x2 = int(x0 - 1000 * (-b))
    y2 = int(y0 - 1000 * a)
    cv2.line(image, (x1, y1), (x2, y2), (0, 255, 0), 2)

# Display the result
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('Hough Line Transform')
plt.show()

2. Template Matching untuk Deteksi Objek
# Load the main image and template
image = cv2.imread('main_image.jpg')
template = cv2.imread('template.jpg', 0)
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Template Matching
result = cv2.matchTemplate(gray_image, template, cv2.TM_CCOEFF_NORMED)
min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)

# Draw a rectangle around the matched region
top_left = max_loc
h, w = template.shape
bottom_right = (top_left[0] + w, top_left[1] + h)
cv2.rectangle(image, top_left, bottom_right, (0, 0, 255), 2)

# Display the result
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('Template Matching')
plt.show()

3. Pembuatan Pyramid Gambar
# Load the image
image = cv2.imread('example_image.jpg')

# Create a Gaussian Pyramid
pyr_down = cv2.pyrDown(image)
pyr_up = cv2.pyrUp(pyr_down)

# Display images
plt.figure(figsize=(10, 5))
plt.subplot(1, 3, 1)
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('Original Image')

plt.subplot(1, 3, 2)
plt.imshow(cv2.cvtColor(pyr_down, cv2.COLOR_BGR2RGB))
plt.title('Pyramid Down')

plt.subplot(1, 3, 3)
plt.imshow(cv2.cvtColor(pyr_up, cv2.COLOR_BGR2RGB))
plt.title('Pyramid Up')
plt.show()

4. Deteksi Lingkaran Menggunakan Hough Transform
# Load the image
image = cv2.imread('circles.jpg')
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Hough Circle Transform
circles = cv2.HoughCircles(gray, cv2.HOUGH_GRADIENT, dp=1, minDist=20, param1=50, param2=30, minRadius=0, maxRadius=0)

# Draw the circles
if circles is not None:
    circles = np.uint16(np.around(circles))
    for i in circles[0, :]:
        # Draw the outer circle
        cv2.circle(image, (i[0], i[1]), i[2], (0, 255, 0), 2)
        # Draw the center
        cv2.circle(image, (i[0], i[1]), 2, (0, 0, 255), 3)

# Display the result
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('Hough Circle Transform')
plt.show()


Berikut adalah kode dan contoh implementasi untuk masing-masing tugas yang disebutkan:

1. Ekstraksi Garis dengan Hough Transform
python
Copy code
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the image
image = cv2.imread('example_image.jpg')
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Edge detection
edges = cv2.Canny(gray, 50, 150, apertureSize=3)

# Hough Line Transform
lines = cv2.HoughLines(edges, 1, np.pi/180, 200)

# Draw the lines on the image
for line in lines:
    rho, theta = line[0]
    a = np.cos(theta)
    b = np.sin(theta)
    x0 = a * rho
    y0 = b * rho
    x1 = int(x0 + 1000 * (-b))
    y1 = int(y0 + 1000 * a)
    x2 = int(x0 - 1000 * (-b))
    y2 = int(y0 - 1000 * a)
    cv2.line(image, (x1, y1), (x2, y2), (0, 255, 0), 2)

# Display the result
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('Hough Line Transform')
plt.show()
2. Template Matching untuk Deteksi Objek
python
Copy code
# Load the main image and template
image = cv2.imread('main_image.jpg')
template = cv2.imread('template.jpg', 0)
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Template Matching
result = cv2.matchTemplate(gray_image, template, cv2.TM_CCOEFF_NORMED)
min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)

# Draw a rectangle around the matched region
top_left = max_loc
h, w = template.shape
bottom_right = (top_left[0] + w, top_left[1] + h)
cv2.rectangle(image, top_left, bottom_right, (0, 0, 255), 2)

# Display the result
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('Template Matching')
plt.show()
3. Pembuatan Pyramid Gambar
python
Copy code
# Load the image
image = cv2.imread('example_image.jpg')

# Create a Gaussian Pyramid
pyr_down = cv2.pyrDown(image)
pyr_up = cv2.pyrUp(pyr_down)

# Display images
plt.figure(figsize=(10, 5))
plt.subplot(1, 3, 1)
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('Original Image')

plt.subplot(1, 3, 2)
plt.imshow(cv2.cvtColor(pyr_down, cv2.COLOR_BGR2RGB))
plt.title('Pyramid Down')

plt.subplot(1, 3, 3)
plt.imshow(cv2.cvtColor(pyr_up, cv2.COLOR_BGR2RGB))
plt.title('Pyramid Up')
plt.show()
4. Deteksi Lingkaran Menggunakan Hough Transform
python
Copy code
# Load the image
image = cv2.imread('circles.jpg')
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Hough Circle Transform
circles = cv2.HoughCircles(gray, cv2.HOUGH_GRADIENT, dp=1, minDist=20, param1=50, param2=30, minRadius=0, maxRadius=0)

# Draw the circles
if circles is not None:
    circles = np.uint16(np.around(circles))
    for i in circles[0, :]:
        # Draw the outer circle
        cv2.circle(image, (i[0], i[1]), i[2], (0, 255, 0), 2)
        # Draw the center
        cv2.circle(image, (i[0], i[1]), 2, (0, 0, 255), 3)

# Display the result
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('Hough Circle Transform')
plt.show()

5. Ekstraksi Warna Dominan pada Gambar
from sklearn.cluster import KMeans

# Load the image
image = cv2.imread('example_image.jpg')
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
pixels = image.reshape(-1, 3)

# Apply K-Means Clustering
kmeans = KMeans(n_clusters=3)
kmeans.fit(pixels)
dominant_colors = kmeans.cluster_centers_.astype(int)

# Visualize dominant colors
plt.figure(figsize=(8, 2))
for i, color in enumerate(dominant_colors):
    plt.subplot(1, 3, i + 1)
    plt.imshow([[color / 255.0]])
    plt.axis('off')
plt.show()

6. Deteksi Kontur pada Gambar
# Load the image
image = cv2.imread('example_image.jpg')
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Find contours
_, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)
contours, _ = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

# Draw contours
cv2.drawContours(image, contours, -1, (0, 255, 0), 3)

# Display the result
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('Contours')
plt.show()

Gambar untuk Ekstraksi Garis dengan Hough Transform:

Gunakan gambar jalan raya dengan garis marka jalan yang jelas.
Contoh gambar dapat dicari dengan kata kunci seperti "road with lane markings".
Gambar untuk Template Matching:

Gunakan gambar utama yang besar (misalnya, ruang kantor) dan template kecil (misalnya, logo di layar komputer).
Contoh: Cari kata kunci seperti "office image" dan "computer screen".
Gambar untuk Pyramid Gambar:

Gunakan gambar apa saja yang memiliki detail menarik, misalnya foto pemandangan atau kota.
Contoh kata kunci: "landscape image", "cityscape".
Gambar untuk Deteksi Lingkaran Menggunakan Hough Transform:

Gunakan gambar yang memiliki objek berbentuk lingkaran, seperti gambar koin atau bola.
Contoh kata kunci: "coins image", "circle objects".
Gambar untuk Ekstraksi Warna Dominan:

Gunakan gambar dengan warna mencolok atau variasi warna yang tinggi, misalnya foto bunga atau pemandangan.
Contoh kata kunci: "flower image", "colorful landscape".
Gambar untuk Deteksi Kontur:

Gunakan gambar dengan kontras tinggi atau objek yang memiliki tepi jelas, misalnya bentuk geometris.
Contoh kata kunci: "shapes on white background".

