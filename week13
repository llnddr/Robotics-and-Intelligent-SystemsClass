Extended Kalman Filter (EKF): Robot Navigasi dengan GPS dan IMU.
Unscented Kalman Filter (UKF): Estimasi Navigasi Robot menggunakan Data GPS dan IMU.
Tracking Objek Bergerak dengan Kalman Filter.
Tracking Drone dengan gerakan parabola.
Petunjuk tambahan:

Setiap baris kode harus memiliki penjelasan atau komentar.
Hasil simulasi (output visual) harus dianalisis.
Semua kode harus bebas error.

1. Extended Kalman Filter (EKF): Robot Navigasi dengan GPS dan IMU
Penjelasan: EKF digunakan untuk memperkirakan posisi robot berdasarkan data GPS dan IMU. Algoritma ini menggabungkan data sensor menggunakan proses prediksi dan pembaruan.
Langkah-langkah:
Modelkan gerakan robot dengan persamaan state-space.
Gunakan data sensor sintetis (GPS dan IMU) sebagai input.
Implementasikan EKF dengan prediksi dan pembaruan.
Visualisasikan lintasan sebenarnya, lintasan yang diukur oleh GPS, dan lintasan yang diestimasi oleh EKF.

2. Unscented Kalman Filter (UKF): Estimasi Navigasi Robot
Penjelasan: UKF memperluas Kalman Filter untuk menangani model non-linear dengan lebih baik menggunakan transformasi deterministik (unscented transform).
Langkah-langkah:
Tentukan model state-space robot dengan fungsi non-linear.
Gunakan data sintetis GPS dan IMU untuk simulasi.
Implementasikan UKF dengan langkah-langkah prediksi dan pembaruan.
Visualisasikan hasil estimasi.

3. Tracking Objek Bergerak dengan Kalman Filter
Penjelasan: Kalman Filter digunakan untuk melacak posisi objek yang bergerak dalam garis lurus atau lintasan sederhana.
Langkah-langkah:
Tentukan model gerakan objek (contoh: gerakan dengan kecepatan konstan).
Gunakan data pengukuran posisi objek (sintetis atau real).
Terapkan Kalman Filter untuk memperkirakan posisi objek.
Bandingkan hasil estimasi dengan posisi sebenarnya.

4. Tracking Drone dengan Gerakan Parabola
Penjelasan: Menggunakan model parabola untuk mendeskripsikan gerakan drone (misalnya, gerakan yang dipengaruhi oleh gravitasi).
Langkah-langkah:
Tentukan persamaan parabola untuk lintasan drone.
Simulasikan data pengukuran posisi drone.
Gunakan Kalman Filter untuk melacak posisi drone.
Visualisasikan lintasan sebenarnya, pengukuran, dan hasil estimasi.

Simulasi dengan Webots
Robot Positioning Estimation using ML Techniques

Gunakan Webots 2020a, Python 3.7, dan library Machine Learning (TensorFlow, Keras).
Estimasi posisi robot lokal dengan Neural Networks dan Particles Filter.
Four-Wheeled Robot Localization with Kalman Filter

Simulasi robot 4 roda dengan mekanisme kemudi Ackerman.
Menggunakan wheel odometry, pengukuran inersia, dan Kalman Filter untuk akurasi pemetaan pada permukaan simulasi yang tidak rata.
Catatan Penting
Git Clone: Unduh repositori terkait dari tautan GitHub yang disediakan.
Persiapan Lingkungan:
Pastikan semua dependensi terinstal.
Sesuaikan konfigurasi file dengan dokumentasi dalam repositori.
Dokumentasikan semua hasil simulasi dengan penjelasan detail.
Jika Anda memerlukan bantuan untuk langkah-langkah berikut:

Konfigurasi Webots dan Python.
Memahami atau memodifikasi kode dalam repositori GitHub.
Menjalankan simulasi dan menganalisis hasil.

1. Robot Positioning Estimation using ML Techniques
Langkah-langkah:
Persiapan Lingkungan:

Install Webots 2020a: Jika belum diinstal, unduh dari situs resmi Webots.
Pastikan Python 3.7 dan pustaka TensorFlow dan Keras sudah terpasang.
Clone Repositori GitHub:

Jalankan perintah di terminal:
bash
Copy code
git clone [tautan_repositori]
cd nama_folder_repositori
Ganti [tautan_repositori] dengan URL repositori GitHub untuk simulasi ini.
Konfigurasi File:

Ikuti panduan konfigurasi file seperti yang dijelaskan di dokumentasi repositori.
Pastikan semua pustaka Python yang diperlukan diinstal:
bash
Copy code
pip install -r requirements.txt
Menjalankan Simulasi:

Buka proyek di Webots.
Jalankan skrip Python untuk memulai simulasi. Contoh:
bash
Copy code
python main.py
Pastikan simulasi berjalan tanpa error.
Analisis Hasil:

Simpan output visual seperti grafik estimasi posisi robot.
Jelaskan bagaimana Neural Networks dan Particle Filter meningkatkan akurasi.
2. Four-Wheeled Robot Localization with Kalman Filter
Langkah-langkah:
Persiapan Lingkungan:

Pastikan Webots sudah terinstal, dan gunakan versi yang kompatibel (2020a).
Pastikan Python 3.7 terhubung dengan Webots.
Clone Repositori GitHub:

Unduh kode dengan perintah:
bash
Copy code
git clone [tautan_repositori]
cd nama_folder_repositori
Konfigurasi File:

Periksa apakah ada file konfigurasi untuk sensor (IMU, odometry).
Atur parameter Kalman Filter (misalnya, matriks covariance).
Menjalankan Simulasi:

Buka file simulasi di Webots.
Jalankan skrip Python yang sudah disediakan di repositori.
bash
Copy code
python kalman_localization.py
Analisis Hasil:

Perhatikan lintasan robot pada permukaan yang tidak rata.
Bandingkan estimasi posisi dengan lintasan sebenarnya.
Jika Anda Memerlukan Bantuan Tambahan:
Saya dapat membantu memodifikasi kode atau menjelaskan hasil simulasi.
Anda juga bisa meminta contoh kode untuk implementasi Kalman Filter atau Particle Filter dalam Python.

import numpy as np
import matplotlib.pyplot as plt

# Parameter EKF
dt = 0.1  # Waktu langkah
state = np.array([0, 0, 0])  # [x, y, theta] posisi awal
covariance = np.eye(3) * 0.1  # Covariance matrix awal
process_noise = np.diag([0.01, 0.01, 0.001])  # Proses noise (Q)
measurement_noise = np.diag([5, 5])  # Noise GPS (R)

# Model Gerak
def motion_model(state, control, dt):
    x, y, theta = state
    v, omega = control
    x_new = x + v * np.cos(theta) * dt
    y_new = y + v * np.sin(theta) * dt
    theta_new = theta + omega * dt
    return np.array([x_new, y_new, theta_new])

# Jacobian untuk model gerak
def jacobian_motion(state, control, dt):
    _, _, theta = state
    v, _ = control
    F = np.array([
        [1, 0, -v * np.sin(theta) * dt],
        [0, 1,  v * np.cos(theta) * dt],
        [0, 0,  1]
    ])
    return F

# Model Pengamatan (GPS)
def measurement_model(state):
    return state[:2]

# Jacobian untuk pengamatan
def jacobian_measurement():
    return np.array([
        [1, 0, 0],
        [0, 1, 0]
    ])

# Data GPS dan IMU Simulasi
np.random.seed(42)
true_positions = [np.array([0, 0, 0])]
gps_data = []
imu_controls = []

for t in range(100):
    # Kontrol IMU (kecepatan linear dan sudut)
    v = 1.0
    omega = 0.1
    imu_controls.append([v, omega])

    # Posisi sebenarnya
    true_position = motion_model(true_positions[-1], [v, omega], dt)
    true_positions.append(true_position)

    # Data GPS dengan noise
    gps = measurement_model(true_position) + np.random.multivariate_normal([0, 0], measurement_noise)
    gps_data.append(gps)

# EKF Implementasi
estimated_positions = [state]
for i in range(len(gps_data)):
    # Predict step
    control = imu_controls[i]
    state_pred = motion_model(estimated_positions[-1], control, dt)
    F = jacobian_motion(estimated_positions[-1], control, dt)
    covariance_pred = F @ covariance @ F.T + process_noise

    # Update step
    z = gps_data[i]
    H = jacobian_measurement()
    y = z - measurement_model(state_pred)
    S = H @ covariance_pred @ H.T + measurement_noise
    K = covariance_pred @ H.T @ np.linalg.inv(S)

    state_est = state_pred + K @ y
    covariance = (np.eye(3) - K @ H) @ covariance_pred
    estimated_positions.append(state_est)

# Plot Hasil
true_positions = np.array(true_positions)
gps_data = np.array(gps_data)
estimated_positions = np.array(estimated_positions)

plt.figure(figsize=(10, 6))
plt.plot(true_positions[:, 0], true_positions[:, 1], 'g-', label='True Path')
plt.scatter(gps_data[:, 0], gps_data[:, 1], c='r', s=20, label='GPS Data (Noise)')
plt.plot(estimated_positions[:, 0], estimated_positions[:, 1], 'b-', label='EKF Estimate')
plt.legend()
plt.title("Extended Kalman Filter (EKF) for GPS+IMU")
plt.xlabel("X Position (m)")
plt.ylabel("Y Position (m)")
plt.grid()
plt.show()

# Import modul yang diperlukan
import numpy as np
import matplotlib.pyplot as plt
from filterpy.kalman import UnscentedKalmanFilter as UKF
from filterpy.kalman import MerweScaledSigmaPoints

# UKF Setup
def fx(state, dt, control):
    x, y, theta = state
    v, omega = control
    x_new = x + v * np.cos(theta) * dt
    y_new = y + v * np.sin(theta) * dt
    theta_new = theta + omega * dt
    return np.array([x_new, y_new, theta_new])

def hx(state):
    return state[:2]  # Observasi (x, y)

# Sigma points untuk UKF
points = MerweScaledSigmaPoints(n=3, alpha=0.1, beta=2., kappa=1)
ukf = UKF(dim_x=3, dim_z=2, fx=fx, hx=hx, dt=0.1, points=points)
ukf.x = np.array([0., 0., 0.])  # State awal
ukf.P *= 0.1
ukf.Q = np.diag([0.01, 0.01, 0.01])  # Noise proses
ukf.R = np.diag([5, 5])  # Noise pengamatan GPS

# Simulasi Data
np.random.seed(42)
dt = 0.1
gps_data = []
controls = []
true_states = [np.array([0, 0, 0])]

for t in range(100):
    # Kontrol gerakan (kecepatan dan rotasi)
    control = np.array([1.0, 0.1])
    controls.append(control)

    # Gerak robot sebenarnya
    true_state = fx(true_states[-1], dt, control)
    true_states.append(true_state)

    # Pengamatan GPS dengan noise
    gps = true_state[:2] + np.random.multivariate_normal([0, 0], np.diag([5, 5]))
    gps_data.append(gps)

# Jalankan UKF
ukf_positions = []
for i, control in enumerate(controls):
    ukf.predict(control=control)
    ukf.update(gps_data[i])
    ukf_positions.append(ukf.x)

# Plot hasil
true_states = np.array(true_states)
gps_data = np.array(gps_data)
ukf_positions = np.array(ukf_positions)

plt.figure(figsize=(10, 6))
plt.plot(true_states[:, 0], true_states[:, 1], 'g-', label='True Path')  # Jalur sebenarnya
plt.scatter(gps_data[:, 0], gps_data[:, 1], c='r', s=20, label='GPS Data (Noise)')  # Data GPS
plt.plot(ukf_positions[:, 0], ukf_positions[:, 1], '-', color='purple', label='UKF Estimate')  # Estimasi UKF
plt.legend()
plt.title("Unscented Kalman Filter (UKF) for GPS+IMU")
plt.xlabel("X Position (m)")
plt.ylabel("Y Position (m)")
plt.grid()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Fungsi Model Gerak (Linear)
def motion_model(state, dt):
    # State: [posisi_x, kecepatan_x, posisi_y, kecepatan_y]
    F = np.array([
        [1, dt, 0,  0],
        [0,  1, 0,  0],
        [0,  0, 1, dt],
        [0,  0, 0,  1]
    ])
    return F @ state

# Model Pengamatan (Hanya Posisi)
def measurement_model(state):
    return np.array([state[0], state[2]])  # [posisi_x, posisi_y]

# Jacobian untuk Pengamatan
def jacobian_measurement():
    return np.array([
        [1, 0, 0, 0],
        [0, 0, 1, 0]
    ])

# Inisialisasi Variabel
dt = 0.1  # Timestep
state = np.array([0, 1, 0, 1])  # [pos_x, vel_x, pos_y, vel_y]
covariance = np.eye(4) * 0.1  # Covariance Matrix
process_noise = np.eye(4) * 0.01  # Proses noise (Q)
measurement_noise = np.eye(2) * 0.5  # Noise sensor posisi (R)

# Simulasi Data
np.random.seed(42)
true_states = [state]
measurements = []

for t in range(100):
    # Gerak objek sebenarnya (sinusoidal)
    state[0] += np.sin(0.1 * t) * 0.1  # Posisi X
    state[2] += np.cos(0.1 * t) * 0.1  # Posisi Y
    state = motion_model(state, dt)
    true_states.append(state)

    # Sensor membaca posisi dengan noise
    measurement = measurement_model(state) + np.random.multivariate_normal([0, 0], measurement_noise)
    measurements.append(measurement)

# Jalankan Kalman Filter
estimated_states = [np.array([0, 1, 0, 1])]
for i in range(len(measurements)):
    # Predict step
    F = np.array([
        [1, dt, 0,  0],
        [0,  1, 0,  0],
        [0,  0, 1, dt],
        [0,  0, 0,  1]
    ])
    state_pred = F @ estimated_states[-1]
    covariance_pred = F @ covariance @ F.T + process_noise

    # Update step
    z = measurements[i]
    H = jacobian_measurement()
    y = z - H @ state_pred
    S = H @ covariance_pred @ H.T + measurement_noise
    K = covariance_pred @ H.T @ np.linalg.inv(S)

    state_est = state_pred + K @ y
    covariance = (np.eye(4) - K @ H) @ covariance_pred
    estimated_states.append(state_est)

# Plot Hasil
true_states = np.array(true_states)
measurements = np.array(measurements)
estimated_states = np.array(estimated_states)

plt.figure(figsize=(10, 6))
plt.plot(true_states[:, 0], true_states[:, 2], 'g-', label='True Path')  # Jalur sebenarnya
plt.scatter(measurements[:, 0], measurements[:, 1], c='r', s=20, label='Sensor Data (Noisy)')  # Data Sensor
plt.plot(estimated_states[:, 0], estimated_states[:, 2], 'b--', label='KF Estimate')  # Estimasi KF
plt.legend()
plt.title("Kalman Filter: Tracking Objek Bergerak dengan Sensor Noisy")
plt.xlabel("X Position (m)")
plt.ylabel("Y Position (m)")
plt.grid()
plt.show()


import numpy as np
import matplotlib.pyplot as plt

# Fungsi Model Gerak
def motion_model(state, dt):
    # State: [posisi_x, kecepatan_x, posisi_y, kecepatan_y]
    F = np.array([
        [1, dt, 0,  0],
        [0,  1, 0,  0],
        [0,  0, 1, dt],
        [0,  0, 0,  1]
    ])
    return F @ state

# Model Pengamatan (Hanya Posisi)
def measurement_model(state):
    return np.array([state[0], state[2]])  # [posisi_x, posisi_y]

# Jacobian untuk Pengamatan
def jacobian_measurement():
    return np.array([
        [1, 0, 0, 0],
        [0, 0, 1, 0]
    ])

# Inisialisasi Variabel
dt = 0.1  # Timestep
state = np.array([0, 5, 0, 15])  # [pos_x, vel_x, pos_y, vel_y]
covariance = np.eye(4) * 0.1  # Covariance Matrix
process_noise = np.eye(4) * 0.01  # Proses noise (Q)
measurement_noise = np.eye(2) * 0.5  # Noise sensor posisi (R)

# Simulasi Data
np.random.seed(42)
true_states = [state]
measurements = []

for t in range(100):
    # Gerakan parabola: Y dipengaruhi gravitasi
    state[3] -= 0.98 * dt  # Gravitasi (penurunan kecepatan Y)
    state = motion_model(state, dt)
    true_states.append(state)

    # Sensor membaca posisi dengan noise
    measurement = measurement_model(state) + np.random.multivariate_normal([0, 0], measurement_noise)
    measurements.append(measurement)

# Jalankan Kalman Filter
estimated_states = [np.array([0, 5, 0, 15])]
for i in range(len(measurements)):
    # Predict step
    F = np.array([
        [1, dt, 0,  0],
        [0,  1, 0,  0],
        [0,  0, 1, dt],
        [0,  0, 0,  1]
    ])
    state_pred = F @ estimated_states[-1]
    covariance_pred = F @ covariance @ F.T + process_noise

    # Update step
    z = measurements[i]
    H = jacobian_measurement()
    y = z - H @ state_pred
    S = H @ covariance_pred @ H.T + measurement_noise
    K = covariance_pred @ H.T @ np.linalg.inv(S)

    state_est = state_pred + K @ y
    covariance = (np.eye(4) - K @ H) @ covariance_pred
    estimated_states.append(state_est)

# Plot Hasil
true_states = np.array(true_states)
measurements = np.array(measurements)
estimated_states = np.array(estimated_states)

plt.figure(figsize=(10, 6))
plt.plot(true_states[:, 0], true_states[:, 2], 'g-', label='True Path')  # Jalur sebenarnya
plt.scatter(measurements[:, 0], measurements[:, 1], c='r', s=20, label='Sensor Data (Noisy)')  # Data Sensor
plt.plot(estimated_states[:, 0], estimated_states[:, 2], 'b--', label='KF Estimate')  # Estimasi KF
plt.legend()
plt.title("Kalman Filter: Tracking Drone dengan Gerakan Parabola")
plt.xlabel("X Position (m)")
plt.ylabel("Y Position (m)")
plt.grid()
plt.show()


